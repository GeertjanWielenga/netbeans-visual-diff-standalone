/*
 * NewJFrame.java
 *
 * Created on 26.11.2010, 14:07:08
 */
package de.cismet.diff.guidiff;

import java.awt.BorderLayout;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.Reader;
import java.io.Writer;
import org.netbeans.api.diff.Diff;
import org.netbeans.api.diff.DiffView;
import org.netbeans.api.diff.Difference;
import org.netbeans.api.diff.StreamSource;

/**
 *
 * @author thorsten
 */
public class NewJFrame extends javax.swing.JFrame {
    //private static final String MIMETYPE = "text/x-java";
    private static final String MIMETYPE = "text/plain";
    //private static final String MIMETYPE = "text/html";
    //private static final String MIMETYPE = "text/javascript";
DiffView view;
int diffNo=-1;
    /** Creates new form NewJFrame */
    public NewJFrame() throws Exception {
       //UIManager.put("EditorPaneUI", new BaseTextUI().getClass().getCanonicalName());
        initComponents();
       
        //final File fileA = new File("E:\\Projekte\\guidiff\\filestodiff\\json1.json");
        //final File fileB = new File("E:\\Projekte\\guidiff\\filestodiff\\json2.json");
        //final File fileA = new File("E:\\Projekte\\guidiff\\filestodiff\\java1.java");
        //final File fileB = new File("E:\\Projekte\\guidiff\\filestodiff\\java2.java");
        final File fileA = new File("E:\\Projekte\\guidiff\\filestodiff\\text1.txt");
        final File fileB = new File("E:\\Projekte\\guidiff\\filestodiff\\text2.txt");
        //final File fileA = new File("E:\\Projekte\\guidiff\\filestodiff\\html1.html");
        //final File fileB = new File("E:\\Projekte\\guidiff\\filestodiff\\html2.html");


//
//        Component dv = Diff.getDefault().createDiff("A", "AA", new FileReader(fileA), "B", "BB", new FileReader(fileB), "text/x-java");
//            DiffPresenter dp=new DiffPresenter(new DiffPresenter.Info("A", "AA", "B", "BB", "text/x-java", false, false) {
//
//                public Reader createFirstReader() throws FileNotFoundException {
//                    return new FileReader(fileA);
//                }
//
//                public Reader createSecondReader() throws FileNotFoundException {
//                    return new FileReader(fileB);
//                }
//            });
//            getContentPane().add(dv, BorderLayout.CENTER);

        StreamSource source1 = new StreamSource() {

            @Override
            public String getName() {
                return "name";
            }

            @Override
            public String getTitle() {
                return "title";
            }

            @Override
            public String getMIMEType() {
                return MIMETYPE;
            }

            @Override
            public Reader createReader() throws IOException {
                return new FileReader(fileA);
            }

            @Override
            public Writer createWriter(Difference[] conflicts) throws IOException {
                return null;
            }
        };
        StreamSource source2 = new StreamSource() {

            @Override
            public String getName() {
                return "name2";
            }

            @Override
            public String getTitle() {
                return "title2";
            }

            @Override
            public String getMIMEType() {
                return MIMETYPE;
            }

            @Override
            public Reader createReader() throws IOException {
                return new FileReader(fileB);
            }

            @Override
            public Writer createWriter(Difference[] conflicts) throws IOException {
                return null;
            }
        };
        
//        try {

            view = Diff.getDefault().createDiff(source1, source2);
            //view.setCurrentDifference(3);
            //view=new EditableDiffView(source1, source2, true);
            getContentPane().add(view.getComponent(), BorderLayout.CENTER);
//        } catch (IOException ex) {
//            Exceptions.printStackTrace(ex);
//        }


    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnlControls = new javax.swing.JPanel();
        btnPrevDifference = new javax.swing.JButton();
        btnNextDifference = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnPrevDifference.setText(org.openide.util.NbBundle.getMessage(NewJFrame.class, "NewJFrame.btnPrevDifference.text")); // NOI18N
        btnPrevDifference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrevDifferenceActionPerformed(evt);
            }
        });
        pnlControls.add(btnPrevDifference);

        btnNextDifference.setText(org.openide.util.NbBundle.getMessage(NewJFrame.class, "NewJFrame.btnNextDifference.text")); // NOI18N
        btnNextDifference.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextDifferenceActionPerformed(evt);
            }
        });
        pnlControls.add(btnNextDifference);

        getContentPane().add(pnlControls, java.awt.BorderLayout.SOUTH);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-729)/2, (screenSize.height-706)/2, 729, 706);
    }// </editor-fold>//GEN-END:initComponents

    private void btnNextDifferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextDifferenceActionPerformed
        view.setCurrentDifference((view.getCurrentDifference()+1) % view.getDifferenceCount());
    }//GEN-LAST:event_btnNextDifferenceActionPerformed

    private void btnPrevDifferenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrevDifferenceActionPerformed
        view.setCurrentDifference((view.getCurrentDifference() == 0 ? view.getDifferenceCount() - 1 : view.getCurrentDifference()-1) % view.getDifferenceCount());
    }//GEN-LAST:event_btnPrevDifferenceActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    new NewJFrame().setVisible(true);
                } catch (Exception ex) {
                    ex.printStackTrace();
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnNextDifference;
    private javax.swing.JButton btnPrevDifference;
    private javax.swing.JPanel pnlControls;
    // End of variables declaration//GEN-END:variables
}
