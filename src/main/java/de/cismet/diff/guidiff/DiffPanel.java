/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DiffPanel.java
 *
 * Created on 04.12.2010, 15:51:01
 */
package de.cismet.diff.guidiff;

import java.awt.BorderLayout;
import java.awt.Component;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import java.io.Writer;
import javax.swing.SwingWorker;

import org.netbeans.api.diff.Diff;
import org.netbeans.api.diff.DiffView;
import org.netbeans.api.diff.Difference;
import org.netbeans.api.diff.StreamSource;

/**
 *
 * @author thorsten
 */
public class DiffPanel extends javax.swing.JPanel {

    private final transient org.apache.log4j.Logger log = org.apache.log4j.Logger.getLogger(this.getClass());
    DiffView view;
    String jsonLeft;
    String jsonRight;

    /** Creates new form DiffPanel */
    public DiffPanel() {
        initComponents();
    }

    public void update() {
        if (jsonLeft == null || jsonRight == null) {
            log.warn("during update: one json object was null");
        } else {

            new SwingWorker<Component, Void>() {

                @Override
                protected Component doInBackground() throws Exception {
                    StreamSource source1 = new StreamSource() {

                        @Override
                        public String getName() {
                            return "name";
                        }

                        @Override
                        public String getTitle() {
                            return "title";
                        }

                        @Override
                        public String getMIMEType() {
                            return "text/javascript";
                        }

                        @Override
                        public Reader createReader() throws IOException {
                            return new StringReader(jsonLeft);
                        }

                        @Override
                        public Writer createWriter(Difference[] conflicts) throws IOException {
                            return null;
                        }
                    };
                    StreamSource source2 = new StreamSource() {

                        @Override
                        public String getName() {
                            return "name2";
                        }

                        @Override
                        public String getTitle() {
                            return "title2";
                        }

                        @Override
                        public String getMIMEType() {
                            return "text/javascript";
                        }

                        @Override
                        public Reader createReader() throws IOException {
                            return new StringReader(jsonRight);
                        }

                        @Override
                        public Writer createWriter(Difference[] conflicts) throws IOException {
                            return null;
                        }
                    };

                    return Diff.getDefault().createDiff(source1, source2).getComponent();
                }

                @Override
                protected void done() {
                    try {
                        Component result = get();
                        removeAll();
                        add(result, BorderLayout.CENTER);
                    } catch (Exception e) {
                        log.error("error during update of diff component", e);
                    }
                }
            }.execute();


        }
    }

    public String getJsonLeft() {
        return jsonLeft;
    }

    public void setJsonLeft(String jsonLeft) {
        this.jsonLeft = jsonLeft;

    }

    public String getJsonRight() {
        return jsonRight;
    }

    public void setJsonRight(String jsonRight) {
        this.jsonRight = jsonRight;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    public void clear() {
        removeAll();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
